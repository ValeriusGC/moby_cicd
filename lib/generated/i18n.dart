import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get add_title => "Editor";
  String get add_todo => "Add todo";
  String get created => "created";
  String get custom_sort => "custom sort";
  String get date_format => "yyyy.MM.dd HH:mm:ss";
  String get default_sort => "default sort";
  String get dismissed => "Dismissed";
  String get dlg_mark_about_recycled => "To recycle bin";
  String get dlg_mark_about_unrecycled => "Restore note";
  String get dlg_selected_notes_title => "Note chosen:";
  String get dlg_sort_apply => "Apply";
  String get dlg_sort_asc => "ASC";
  String get dlg_sort_desc => "DESC";
  String get dlg_sort_title => "Sort type";
  String get edited => "edited";
  String get empty_note => "<empty>";
  String get empty_note_deleted => "Note without text is ignored";
  String get filter_notes => "filter notes";
  String get nre => "Not Realized Yet";
  String get pressed => "Pressed";
  String get show_active => "show active";
  String get show_all => "show all";
  String get show_recycle => "show recycle bin";
  String get sort_by_create => "sort by create";
  String get sort_by_edit => "sort by edit";
  String get sort_by_str => "sort by string";
  String get sort_notes => "sort notes";
  String get sort_screen => "set sort...";
  String get text_hint => "New note...";
  String get title => "MobyNote-0.62(db.v.8)";
  String get title_hint => "Title (optional)";
  String get undo => "Undo";
  String mark_recycled(dynamic cnt) {
    switch (cnt.toString()) {
      case "1":
        return "Note sent to recycle bin";
      default:
        return "Notes ($cnt) sent to recycle bin";
    }
  }
  String mark_unrecycled(dynamic cnt) {
    switch (cnt.toString()) {
      case "1":
        return "Note restored";
      default:
        return "Notes ($cnt) restored";
    }
  }
}

class $ru extends S {
  const $ru();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get show_active => "показать активные";
  @override
  String get sort_notes => "сортировка";
  @override
  String get dlg_sort_apply => "Применить";
  @override
  String get sort_screen => "настроить сортировку...";
  @override
  String get title_hint => "Заголовок (при желании)";
  @override
  String get title => "Мобинот-0.62(db.v.8)";
  @override
  String get show_all => "показать все";
  @override
  String get dlg_selected_notes_title => "Выбрана заметка:";
  @override
  String get undo => "Отмена";
  @override
  String get dlg_sort_asc => "по возрастанию";
  @override
  String get sort_by_edit => "по времени редактирования";
  @override
  String get dlg_sort_desc => "по убыванию";
  @override
  String get sort_by_str => "по строкам";
  @override
  String get nre => "Пока не реализовано";
  @override
  String get custom_sort => "сортировка 2";
  @override
  String get default_sort => "сортировка по умолчанию";
  @override
  String get dlg_sort_title => "Тип сортировки";
  @override
  String get pressed => "Жато пережато";
  @override
  String get edited => "изменена";
  @override
  String get created => "создана";
  @override
  String get sort_by_create => "по времени создания";
  @override
  String get dismissed => "Убрато";
  @override
  String get show_recycle => "показать корзину";
  @override
  String get empty_note_deleted => "Заметка без текста: не сохраняется";
  @override
  String get add_todo => "Тудуду";
  @override
  String get filter_notes => "фильтр заметок";
  @override
  String get dlg_mark_about_unrecycled => "Восстановить";
  @override
  String get empty_note => "<пусто>";
  @override
  String get add_title => "Редактор";
  @override
  String get dlg_mark_about_recycled => "В корзину";
  @override
  String get date_format => "dd.MM.yyyy HH:mm:ss";
  @override
  String get text_hint => "Заметка...";
  @override
  String mark_unrecycled(dynamic cnt) {
    switch (cnt.toString()) {
      case "1":
        return "Заметка восстановлена";
      default:
        return "Заметки ($cnt) восстановлены";
    }
  }
  @override
  String mark_recycled(dynamic cnt) {
    switch (cnt.toString()) {
      case "1":
        return "Заметка отправлена в корзину";
      default:
        return "Заметки ($cnt) отправлены в корзину";
    }
  }
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("ru", ""),
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "ru":
          return SynchronousFuture<S>(const $ru());
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
